# Ficheiro: src/services/enhanced_analysis_engine.py

import logging
import json
from typing import Dict, Any, Optional

from .deep_search_service import deep_search_service
from .ai_manager import ai_manager

logger = logging.getLogger(__name__)

# --- INSTRU√á√ïES DOS SEUS ANEXOS INTEGRADAS DIRETAMENTE ---
PROMPT_AVATAR_E_PSICOLOGIA = """
Voc√™ √© o MESTRE DA PERSUAS√ÉO VISCERAL. Sua miss√£o √© realizar uma "Engenharia Reversa Psicol√≥gica Profunda". Mergulhe nas DORES MAIS PROFUNDAS e INCONFESS√ÅVEIS dos leads, nos seus DESEJOS MAIS ARDENTES e SECRETOS, e nas suas OBJE√á√ïES MAIS C√çNICAS. Crie um dossi√™ t√£o preciso que o utilizador sinta que pode LER A MENTE dos seus leads.
"""

PROMPT_DRIVERS_MENTAIS = """
Voc√™ √© um Arquiteto de Drivers Mentais. Seu objetivo √© projetar 5 a 7 dos drivers mentais mais poderosos (como Ferida Exposta, Custo Invis√≠vel, Diagn√≥stico Brutal, Ambi√ß√£o Expandida, Rel√≥gio Psicol√≥gico, M√©todo vs Sorte, Decis√£o Bin√°ria) que sejam customizados para o avatar. Para cada driver, crie um NOME, um GATILHO CENTRAL e um ROTEIRO DE ATIVA√á√ÉO com uma pergunta de abertura e uma analogia.
"""

PROMPT_PROVAS_VISUAIS = """
Voc√™ √© o DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS. Sua miss√£o √© criar um arsenal de PROVAS VISUAIS que transformem conceitos abstratos em experi√™ncias f√≠sicas inesquec√≠veis. Para cada conceito chave (uma dor, um desejo, uma obje√ß√£o), crie uma PROVA VISUAL com um NOME IMPACTANTE, o CONCEITO-ALVO e um EXPERIMENTO F√çSICO claro que o demonstre.
"""

class EnhancedAnalysisEngine:
    def __init__(self):
        logger.info("‚úÖ Enhanced Analysis Engine (Modo Robusto) inicializado.")

    def _generate_search_query(self, data: Dict[str, Any]) -> str:
        if data.get('query'):
            return data['query']
        
        segmento = data.get('segmento', '')
        produto = data.get('produto', '')
        publico = data.get('publico', '')
        
        query_parts = [
            "an√°lise de mercado", segmento, produto,
            f"para {publico}" if publico else "",
            "tend√™ncias Brasil 2025", "oportunidades e desafios"
        ]
        return " ".join(filter(None, query_parts))

    def _build_final_prompt(self, user_data: Dict[str, Any], web_context: str) -> str:
        user_data.pop('query', None)

        prompt = f"""
# MISS√ÉO: AN√ÅLISE DE MERCADO ESTRAT√âGICA E PSICOL√ìGICA (N√çVEL DE ELITE)

Voc√™ √© um consultor de neg√≥cios de classe mundial. A sua tarefa √© gerar um relat√≥rio acion√°vel e profundo, seguindo ESTRITAMENTE a estrutura JSON abaixo, com base nos dados fornecidos.

## 1. DADOS FORNECIDOS PELO UTILIZADOR:
```json
{json.dumps(user_data, indent=2, ensure_ascii=False)}
```

## 2. CONTEXTO RECOLHIDO DA WEB:
{web_context}

## 3. INSTRU√á√ïES PARA A AN√ÅLISE (OBRIGAT√ìRIO):

Com base em AMBOS os conjuntos de dados, gere um relat√≥rio ESTRITAMENTE no formato JSON abaixo. SEJA PROFUNDO E ESPEC√çFICO.

### PARTE A: AN√ÅLISE DE MERCADO GERAL
- **resumo_executivo**: Um par√°grafo conciso com os principais insights e recomenda√ß√µes estrat√©gicas.
- **analise_mercado**: Um objeto com "tamanho_mercado" (estimativa), "principais_tendencias" (lista de 3-5 tend√™ncias), "oportunidades" (lista de 3-5 oportunidades) e "ameacas" (lista de 3-5 amea√ßas).
- **analise_concorrencia**: Uma lista de objetos, cada um com "nome", "pontos_fortes" (lista) e "pontos_fracos" (lista).
- **estrategia_posicionamento**: Um objeto com "diferenciacao" e "proposta_valor_unica".
- **plano_acao_inicial**: Um objeto para os primeiros 90 dias, com chaves para cada fase (ex: "primeiros_30_dias") contendo "foco" e "passos" (lista).

### PARTE B: AN√ÅLISE PSICOL√ìGICA PROFUNDA (Use as instru√ß√µes abaixo)
- **avatar_psicologico**: {PROMPT_AVATAR_E_PSICOLOGIA} Crie um perfil como um objeto com "dores_secretas" (lista), "desejos_ardentes" (lista), "medos_paralisantes" (lista) e "objecoes_reais" (lista).
- **drivers_mentais**: {PROMPT_DRIVERS_MENTAIS} Crie uma lista de 5 objetos, cada um com "nome", "gatilho_central" e "roteiro_ativacao".
- **provas_visuais**: {PROMPT_PROVAS_VISUAIS} Crie uma lista de 3 objetos, cada um com "nome_impactante", "conceito_alvo" e "experimento".

**REGRAS CR√çTICAS:**
- A resposta DEVE ser um √∫nico bloco de c√≥digo JSON v√°lido, come√ßando com `{{` e terminando com `}}`.
- N√ÉO inclua nenhum texto, explica√ß√£o ou ```json antes ou depois do JSON.
- Preencha TODAS as sec√ß√µes com conte√∫do detalhado e de alta qualidade.
"""
        return prompt

    def generate_comprehensive_analysis(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        logger.info(f"üöÄ A iniciar an√°lise abrangente para o segmento: {data.get('segmento')}")

        search_query = self._generate_search_query(data)
        logger.info(f"üîç Query de pesquisa definida: '{search_query}'")

        web_context = deep_search_service.perform_deep_search(search_query, data)
        final_prompt = self._build_final_prompt(data, web_context)
        analysis_text = ai_manager.generate_analysis(final_prompt)

        if not analysis_text:
            logger.error("‚ùå A gera√ß√£o de an√°lise pela IA falhou.")
            return {"error": "Falha na gera√ß√£o da an√°lise. Todos os provedores de IA falharam."}

        try:
            json_text = analysis_text.strip()
            if json_text.startswith("```json"):
                json_text = json_text[7:]
            if json_text.endswith("```"):
                json_text = json_text[:-3]
            
            analysis_json = json.loads(json_text)
            logger.info("‚úÖ An√°lise abrangente gerada e analisada com sucesso!")
            return analysis_json
        except json.JSONDecodeError:
            logger.error("‚ùå A IA retornou uma resposta que n√£o √© um JSON v√°lido.")
            return {
                "error": "A resposta da IA n√£o estava no formato JSON esperado.",
                "raw_response": analysis_text
            }

enhanced_analysis_engine = EnhancedAnalysisEngine()
