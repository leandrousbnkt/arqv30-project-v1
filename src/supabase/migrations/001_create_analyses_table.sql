-- Ficheiro: src/supabase/migrations/001_create_analyses_table.sql

-- =================================================================
-- Script de Migração para o Banco de Dados ARQV30 (Supabase/PostgreSQL)
-- Versão: 1.0
-- Descrição: Cria a tabela principal 'analyses' para armazenar os relatórios.
-- =================================================================

-- --- Tabela Principal: analyses ---
-- Esta tabela irá armazenar os dados de entrada do utilizador e o
-- relatório JSON completo gerado pela Inteligência Artificial.

CREATE TABLE IF NOT EXISTS public.analyses (
    -- Coluna de ID: Chave primária que se auto-incrementa.
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    -- Timestamps: Registam quando o registo foi criado e atualizado.
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

    -- Dados de Entrada do Utilizador: Campos para os dados do formulário.
    segmento TEXT,
    produto TEXT,
    preco NUMERIC,
    publico TEXT,
    concorrentes TEXT,
    query TEXT,

    -- Resultado da Análise: Um único campo JSONB para armazenar o relatório completo.
    -- JSONB é usado por ser mais eficiente para indexar e consultar do que JSON.
    comprehensive_analysis JSONB,

    -- Metadados (opcional): Para guardar informações adicionais, como o ID da sessão.
    session_id UUID
);

-- Adiciona comentários às colunas para documentação do esquema.
COMMENT ON TABLE public.analyses IS 'Armazena os relatórios de análise de mercado gerados pela aplicação.';
COMMENT ON COLUMN public.analyses.comprehensive_analysis IS 'Contém o relatório JSON completo gerado pela IA.';


-- --- Função para Atualizar o Timestamp 'updated_at' ---
-- Esta função é um "trigger" que atualiza automaticamente a coluna 'updated_at'
-- sempre que um registo na tabela 'analyses' é modificado.

CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- --- Trigger para a Tabela 'analyses' ---
-- Associa a função acima à tabela 'analyses'.
-- Este trigger será acionado ANTES de qualquer operação de UPDATE.

DROP TRIGGER IF EXISTS on_analyses_updated ON public.analyses;
CREATE TRIGGER on_analyses_updated
    BEFORE UPDATE ON public.analyses
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- --- Permissões de Acesso (Row Level Security) ---
-- Garante que a tabela 'analyses' esteja acessível através da API pública do Supabase.
-- Por defeito, as tabelas são privadas. Este comando torna-as públicas.

ALTER TABLE public.analyses ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Enable public access for all users" ON public.analyses;
CREATE POLICY "Enable public access for all users"
    ON public.analyses FOR ALL
    USING (TRUE)
    WITH CHECK (TRUE);

-- =================================================================
-- Fim do Script de Migração
-- =================================================================
